Women_Arousal = aro_M_HeF) |>
mutate(across(c("Luminance", "Contrast", "JPEG_size80", "LABL", "LABA", "LABB", "Entropy"), as.numeric),
Description = NA)
# Join
naps <- filter(naps, ID %in% filter(napsero, Category == "Non-erotic")$ID)
naps[c("Men_Arousal", "Men_Valence", "Women_Valence", "Women_Arousal", "Nr", "Orientation")] <- NA
napsero[napsero$Category== "Non-erotic", "Category"] <- NA
ids <- napsero[is.na(napsero$Category), ]$ID
for(c in c("Category", "Height", "Width", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy", "Description")) {
napsero[napsero$ID == ids, c] <- naps[naps$ID == ids, c]
}
# Chunk 2
df <- napsero |>
filter(Category %in% c("Male", "Female", "Faces", "People")) |>
mutate(Type = ifelse(Category %in% c("Female", "Male"), "Erotic", "Non-erotic"))
# Chunk 1
#| include: false
#| code-fold: true
library(tidyverse)
library(easystats)
library(ggrepel)
naps <- readxl::read_excel("norms_naps.xls",  skip = 3,
col_names = c("ID", "Category", "Nr", "Orientation", "Description",
"Women_Valence", "Women_Valence_SD", "Women_AvAp",
"Women_AvAp_SD", "Women_Arousal", "Women_Arousal_SD",
"Men_Valence", "Men_Valence_SD", "Men_AvAp", "Men_AvAp_SD",
"Men_Arousal", "Men_Arousal_SD", "All_Valence",
"All_Valence_SD", "All_AvAp", "All_AvAp_SD",
"All_Arousal", "All_Arousal_SD", "Width",
"Height", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy",
"Acronym", "X", "X2")) |>
select(-X, -X2, -Acronym, -ends_with("_SD")) |>
mutate(ID = paste0(ID, ".jpg"))
napsero <- readxl::read_excel("norms_napsero.XLSX", sheet = "Ratings") |>
full_join(readxl::read_excel("norms_napsero.XLSX", sheet = "Image parameters"), by = join_by("ID", "Category")) |>
select(-contains("_SD"), -contains("HoF"), -contains("HoM")) |>
rename(Orientation = `V/H`,
Men_Valence = val_M_HeM,
Women_Valence = val_M_HeF,
Men_Arousal = aro_M_HeM,
Women_Arousal = aro_M_HeF) |>
mutate(across(c("Luminance", "Contrast", "JPEG_size80", "LABL", "LABA", "LABB", "Entropy"), as.numeric),
Description = NA)
# Join
naps <- filter(naps, ID %in% filter(napsero, Category == "Non-erotic")$ID)
naps[c("Men_Arousal", "Men_Valence", "Women_Valence", "Women_Arousal", "Nr", "Orientation")] <- NA
napsero[napsero$Category== "Non-erotic", "Category"] <- NA
ids <- napsero[is.na(napsero$Category), ]$ID
for(c in c("Category", "Height", "Width", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy", "Description")) {
napsero[napsero$ID == ids, c] <- naps[naps$ID == ids, c]
}
# Chunk 2
df <- napsero |>
filter(Category %in% c("Male", "Female", "Faces", "People")) |>
mutate(Type = ifelse(Category %in% c("Female", "Male"), "Erotic", "Non-erotic"))
# Chunk 3
men <- df |>
filter(Type == "Erotic") |>
group_by(Category) |>
slice_max(Men_Arousal, n=8, with_ties = FALSE) |>
pull(ID) |>
c(
df |>
filter(Type == "Erotic") |>
group_by(Category) |>
slice_min(Men_Arousal, n=2, with_ties = FALSE) |>
pull(ID))
women <- df |>
filter(Type == "Erotic", !ID %in% men) |>
group_by(Category) |>
slice_max(Women_Arousal, n=8, with_ties = FALSE) |>
pull(ID) |>
c(
df |>
filter(Type == "Erotic", !ID %in% men) |>
group_by(Category) |>
slice_min(Women_Arousal, n=2, with_ties = FALSE) |>
pull(ID)
)
neutral <- df |>
filter(Type == "Non-erotic", !ID %in% c(men, women)) |>
mutate(Arousal = (Men_Arousal + Women_Arousal) / 2) |>
slice_min(Arousal, n=10, with_ties = FALSE) |>
pull(ID)
pos_arousing <- df |>
filter(Type == "Non-erotic", !ID %in% c(men, women, neutral)) |>
mutate(Arousal = (Men_Arousal + Women_Arousal) / 2,
Valence = (Men_Valence + Women_Valence) / 2) |>
filter(Valence > 5) |>
slice_max(Arousal, n=10, with_ties = FALSE) |>
pull(ID)
selected <- unique(c(men, women, neutral, pos_arousing))
cat(
paste0("N (men) = ", length(men), "\nN (women) = ", length(women),
"\nN (neutral) = ", length(neutral),  "\nN (arousing-positive) = ", length(pos_arousing),
"\nTotal = ", length(selected))
)
# Chunk 4
selected
#| out.width: 1\\textwidth
#| fig.width: 10
#| fig.height: 8
#| dpi: 300
#| message: false
dat <- napsero |>
mutate(Selected = ifelse(ID %in% selected, TRUE, FALSE),
label = ifelse(Selected, str_remove(ID, ".jpg"), NA),
Type = ifelse(Category %in% c("Female", "Male"), "Erotic", "Non-erotic")) |>
pivot_longer(cols = c("Men_Valence", "Men_Arousal", "Women_Valence", "Women_Arousal")) |>
separate(name, into=c("Target", "Variable")) |>
pivot_wider(names_from=Variable, values_from=value)
dat |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target) +
theme_abyss() +
theme(ggside.panel.grid.major = element_blank(),
ggside.axis.text = element_blank(),
ggside.axis.line = element_blank())
dat |>
filter(Selected == "TRUE") |>
ggplot(aes(x = Arousal)) +
geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.50) +
geom_density(aes(colour = Type),lwd = 1, fill = NA) +
facet_wrap(~Target) +
theme_minimal() +
scale_colour_manual(values = c("Non-erotic" = "red", "Erotic" = "blue"))
dat |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target) +
theme_abyss() +
theme(ggside.panel.grid.major = element_blank(),
ggside.axis.text = element_blank(),
ggside.axis.line = element_blank())
dat |>
filter(Selected == "TRUE") |>
ggplot(aes(x = Arousal)) +
geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.50) +
geom_density(aes(colour = Type),lwd = 1, fill = NA) +
facet_wrap(~Target) +
theme_minimal() +
scale_colour_manual(values = c("Non-erotic" = "red", "Erotic" = "blue"))
mean(selection$Women_Arousal)
mean(selection$Men_Arousal)
mean(selection$Women_Arousal)
mean(selection$Men_Arousal)
df2 |>
filter(ID %in% selected2)
selection2 <- df2 |>
filter(ID %in% selected2)
view(selected2)
selection <- df |>
filter(ID %in% selected)
view(selection)
view(selection2)
df2 |>
filter(ID %in% selected2)
selected2
count(selected2)
df2 |>
filter(ID %in% selected2)
dat2 |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target) +
theme_abyss() +
theme(ggside.panel.grid.major = element_blank(),
ggside.axis.text = element_blank(),
ggside.axis.line = element_blank())
df2
df2
view(df2)
dat2 |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target*) +
dat2 |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target*) +
dat2 |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target) +
theme_abyss() +
theme(ggside.panel.grid.major = element_blank(),
ggside.axis.text = element_blank(),
ggside.axis.line = element_blank())
napsero
setwd("C:/Users/aneve/OneDrive - University of Sussex/phd/projects/FictionEro/experiment2/stimuli_selection2")
#| code-fold: true
selection2 <- df2 |>
filter(ID %in% selected2)
mean(selection2$Women_Arousal)
mean(selection2$Men_Arousal)
write.csv(selection2, "stimuli_data2.csv", row.names=FALSE)
knitr::kable(selection2)
# Chunk 1
#| include: false
#| code-fold: true
library(tidyverse)
library(easystats)
library(ggrepel)
naps <- readxl::read_excel("norms_naps.xls",  skip = 3,
col_names = c("ID", "Category", "Nr", "Orientation", "Description",
"Women_Valence", "Women_Valence_SD", "Women_AvAp",
"Women_AvAp_SD", "Women_Arousal", "Women_Arousal_SD",
"Men_Valence", "Men_Valence_SD", "Men_AvAp", "Men_AvAp_SD",
"Men_Arousal", "Men_Arousal_SD", "All_Valence",
"All_Valence_SD", "All_AvAp", "All_AvAp_SD",
"All_Arousal", "All_Arousal_SD", "Width",
"Height", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy",
"Acronym", "X", "X2")) |>
select(-X, -X2, -Acronym, -ends_with("_SD")) |>
mutate(ID = paste0(ID, ".jpg"))
napsero <- readxl::read_excel("norms_napsero.XLSX", sheet = "Ratings") |>
full_join(readxl::read_excel("norms_napsero.XLSX", sheet = "Image parameters"), by = join_by("ID", "Category")) |>
select(-contains("_SD"), -contains("HoF"), -contains("HoM")) |>
rename(Orientation = `V/H`,
Men_Valence = val_M_HeM,
Women_Valence = val_M_HeF,
Men_Arousal = aro_M_HeM,
Women_Arousal = aro_M_HeF) |>
mutate(across(c("Luminance", "Contrast", "JPEG_size80", "LABL", "LABA", "LABB", "Entropy"), as.numeric),
Description = NA)
# Join
naps <- filter(naps, ID %in% filter(napsero, Category == "Non-erotic")$ID)
naps[c("Men_Arousal", "Men_Valence", "Women_Valence", "Women_Arousal", "Nr", "Orientation")] <- NA
napsero[napsero$Category== "Non-erotic", "Category"] <- NA
ids <- napsero[is.na(napsero$Category), ]$ID
for(c in c("Category", "Height", "Width", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy", "Description")) {
napsero[napsero$ID == ids, c] <- naps[naps$ID == ids, c]
}
# Chunk 2
df2 <- napsero |>
# filter(Category %in% c("Male", "Female", "Faces", "People")) |>
mutate(Type = ifelse(Category %in% c("Faces", "People"), "Non-erotic", "Erotic")) # only faces and people are non-erotic, everything else including couples is erotic
# Chunk 3
men <- df2 |>
filter(Type == "Erotic") |>
group_by(Category) |>
slice_max(Men_Arousal, n=8, with_ties = FALSE) |>
pull(ID) |>
c(
df2 |>
filter(Type == "Erotic") |>
group_by(Category) |>
slice_min(Men_Arousal, n=2, with_ties = FALSE) |>
pull(ID))
women <- df2 |>
filter(Type == "Erotic", !ID %in% men) |>
group_by(Category) |>
slice_max(Women_Arousal, n=8, with_ties = FALSE) |>
pull(ID) |>
c(
df2 |>
filter(Type == "Erotic", !ID %in% men) |>
group_by(Category) |>
slice_min(Women_Arousal, n=2, with_ties = FALSE) |>
pull(ID)
)
neutral <- df2 |>
filter(Type == "Non-erotic", !ID %in% c(men, women)) |>
mutate(Arousal = (Men_Arousal + Women_Arousal) / 2) |>
slice_min(Arousal, n=10, with_ties = FALSE) |>
pull(ID)
pos_arousing <- df2 |>
filter(Type == "Non-erotic", !ID %in% c(men, women, neutral)) |>
mutate(Arousal = (Men_Arousal + Women_Arousal) / 2,
Valence = (Men_Valence + Women_Valence) / 2) |>
filter(Valence > 5) |>
slice_max(Arousal, n=10, with_ties = FALSE) |>
pull(ID)
selected2 <- unique(c(men, women, neutral, pos_arousing))
cat(
paste0("N (men) = ", length(men), "\nN (women) = ", length(women),
"\nN (neutral) = ", length(neutral),  "\nN (arousing-positive) = ", length(pos_arousing),
"\nTotal = ", length(selected2))
)
# Chunk 4
selected2
# Chunk 5
#| out.width: 1\\textwidth
#| fig.width: 10
#| fig.height: 8
#| dpi: 300
#| message: false
dat2 <- napsero |>
mutate(Selected = ifelse(ID %in% selected2, TRUE, FALSE),
label = ifelse(Selected, str_remove(ID, ".jpg"), NA),
Type = ifelse(Category %in% c("Faces", "People"), "Non-erotic", "Erotic")) |>
pivot_longer(cols = c("Men_Valence", "Men_Arousal", "Women_Valence", "Women_Arousal")) |>
separate(name, into=c("Target", "Variable")) |>
pivot_wider(names_from=Variable, values_from=value)
dat2 |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target) +
theme_abyss() +
theme(ggside.panel.grid.major = element_blank(),
ggside.axis.text = element_blank(),
ggside.axis.line = element_blank())
dat2 |>
filter(Selected == "TRUE") |>
ggplot(aes(x = Arousal)) +
geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.50) +
geom_density(aes(colour = Type),lwd = 1, fill = NA) +
facet_wrap(~Target) +
theme_minimal() +
scale_colour_manual(values = c("Erotic" = "blue", "Non-erotic" = "red"))
# Chunk 1
#| include: false
#| code-fold: true
library(tidyverse)
library(easystats)
library(ggrepel)
naps <- readxl::read_excel("norms_naps.xls",  skip = 3,
col_names = c("ID", "Category", "Nr", "Orientation", "Description",
"Women_Valence", "Women_Valence_SD", "Women_AvAp",
"Women_AvAp_SD", "Women_Arousal", "Women_Arousal_SD",
"Men_Valence", "Men_Valence_SD", "Men_AvAp", "Men_AvAp_SD",
"Men_Arousal", "Men_Arousal_SD", "All_Valence",
"All_Valence_SD", "All_AvAp", "All_AvAp_SD",
"All_Arousal", "All_Arousal_SD", "Width",
"Height", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy",
"Acronym", "X", "X2")) |>
select(-X, -X2, -Acronym, -ends_with("_SD")) |>
mutate(ID = paste0(ID, ".jpg"))
napsero <- readxl::read_excel("norms_napsero.XLSX", sheet = "Ratings") |>
full_join(readxl::read_excel("norms_napsero.XLSX", sheet = "Image parameters"), by = join_by("ID", "Category")) |>
select(-contains("_SD"), -contains("HoF"), -contains("HoM")) |>
rename(Orientation = `V/H`,
Men_Valence = val_M_HeM,
Women_Valence = val_M_HeF,
Men_Arousal = aro_M_HeM,
Women_Arousal = aro_M_HeF) |>
mutate(across(c("Luminance", "Contrast", "JPEG_size80", "LABL", "LABA", "LABB", "Entropy"), as.numeric),
Description = NA)
# Join
naps <- filter(naps, ID %in% filter(napsero, Category == "Non-erotic")$ID)
naps[c("Men_Arousal", "Men_Valence", "Women_Valence", "Women_Arousal", "Nr", "Orientation")] <- NA
napsero[napsero$Category== "Non-erotic", "Category"] <- NA
ids <- napsero[is.na(napsero$Category), ]$ID
for(c in c("Category", "Height", "Width", "Luminance", "Contrast",
"JPEG_size80", "LABL", "LABA", "LABB", "Entropy", "Description")) {
napsero[napsero$ID == ids, c] <- naps[naps$ID == ids, c]
}
# Chunk 2
df2 <- napsero |>
# filter(Category %in% c("Male", "Female", "Faces", "People")) |>
mutate(Type = ifelse(Category %in% c("Faces", "People"), "Non-erotic", "Erotic")) # only faces and people are non-erotic, everything else including couples is erotic
# Chunk 3
men <- df2 |>
filter(Type == "Erotic") |>
group_by(Category) |>
slice_max(Men_Arousal, n=8, with_ties = FALSE) |>
pull(ID) |>
c(
df2 |>
filter(Type == "Erotic") |>
group_by(Category) |>
slice_min(Men_Arousal, n=2, with_ties = FALSE) |>
pull(ID))
women <- df2 |>
filter(Type == "Erotic", !ID %in% men) |>
group_by(Category) |>
slice_max(Women_Arousal, n=8, with_ties = FALSE) |>
pull(ID) |>
c(
df2 |>
filter(Type == "Erotic", !ID %in% men) |>
group_by(Category) |>
slice_min(Women_Arousal, n=2, with_ties = FALSE) |>
pull(ID)
)
neutral <- df2 |>
filter(Type == "Non-erotic", !ID %in% c(men, women)) |>
mutate(Arousal = (Men_Arousal + Women_Arousal) / 2) |>
slice_min(Arousal, n=10, with_ties = FALSE) |>
pull(ID)
pos_arousing <- df2 |>
filter(Type == "Non-erotic", !ID %in% c(men, women, neutral)) |>
mutate(Arousal = (Men_Arousal + Women_Arousal) / 2,
Valence = (Men_Valence + Women_Valence) / 2) |>
filter(Valence > 5) |>
slice_max(Arousal, n=10, with_ties = FALSE) |>
pull(ID)
selected2 <- unique(c(men, women, neutral, pos_arousing))
cat(
paste0("N (men) = ", length(men), "\nN (women) = ", length(women),
"\nN (neutral) = ", length(neutral),  "\nN (arousing-positive) = ", length(pos_arousing),
"\nTotal = ", length(selected2))
)
# Chunk 4
selected2
# Chunk 5
#| out.width: 1\\textwidth
#| fig.width: 10
#| fig.height: 8
#| dpi: 300
#| message: false
dat2 <- napsero |>
mutate(Selected = ifelse(ID %in% selected2, TRUE, FALSE),
label = ifelse(Selected, str_remove(ID, ".jpg"), NA),
Type = ifelse(Category %in% c("Faces", "People"), "Non-erotic", "Erotic")) |>
pivot_longer(cols = c("Men_Valence", "Men_Arousal", "Women_Valence", "Women_Arousal")) |>
separate(name, into=c("Target", "Variable")) |>
pivot_wider(names_from=Variable, values_from=value)
dat2 |>
ggplot(aes(x=Valence, y=Arousal)) +
geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
# ggrepel::geom_label_repel(aes(label = label)) +
scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
scale_color_manual(values = c(
"Faces" = "#9E9E9E", "People" = "#795548",
"Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
"Female" = "#E91E63", "Male"= "#2196F3")) +
guides(shape = guide_legend(override.aes = list(color="white"))) +
facet_grid(~Target) +
theme_abyss() +
theme(ggside.panel.grid.major = element_blank(),
ggside.axis.text = element_blank(),
ggside.axis.line = element_blank())
dat2 |>
filter(Selected == "TRUE") |>
ggplot(aes(x = Arousal)) +
geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.50) +
geom_density(aes(colour = Type),lwd = 1, fill = NA) +
facet_wrap(~Target) +
theme_minimal() +
scale_colour_manual(values = c("Erotic" = "blue", "Non-erotic" = "red"))
#| code-fold: true
selection2 <- df2 |>
filter(ID %in% selected2)
mean(selection2$Women_Arousal)
mean(selection2$Men_Arousal)
write.csv(selection2, "stimuli_data2.csv", row.names=FALSE)
knitr::kable(selection2)
knitr::kable(selection2)
knitr::kable(selection2)
