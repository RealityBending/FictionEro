// Parameters ======================================================
var fiction_trialnumber = 1

// instructions ====================================================
var fiction_instructions = {
    type: jsPsychHtmlButtonResponse,
    choices: ["Let's start!"],
    stimulus:
        "<h1>Instructions</h1>" +
        // Left aligned text
        "<p style='text-align: left; margin-left: 30%; margin-right: 30%;'>In this study, we aim at validating our new image-generation algorithm (based on the Generative Adversarial Network - GAN technology) trained to produce high-quality erotic (but also non-erotic content).</p>" +
        "<p style='text-align: left; margin-left: 30%; margin-right: 30%;'>In the following task, you will be presented with images generated by our algorithm (preceded by the word '<b>AI-generated</b>'), intermixed with erotic and non-erotic real photos (preceded by the word '<b>Picture</b>') taken from publicly available picture databases, adjusted to be of similar dimension and aspect as the artificially-generated images.</p>" +
        "<p style='text-align: left; margin-left: 30%; margin-right: 30%;'>After each image, you will have to rate the images on the following scales:</p><ul style='text-align: left; margin-left: 30%; margin-right: 30%;'>" +
        "<li><b>Sexy</b>: How sexually appealing do you think the image is.</li>" +
        "<li><b>Arousal</b>: How much you felt your body to react to the image</li>" +
        "<li><b>Convincing</b>: In case you spot any artifacts or problems with the image that made it look fake (mostly applies to the artificial images)</li>" +
        "</ul>",
    data: { screen: "fiction_instructions" },
}

// Condition assignment ============================================
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1))
        ;[array[i], array[j]] = [array[j], array[i]]
    }
    return array
}

function assignCondition(stimuli_list) {
    new_stimuli_list = []
    // Loop through unique categories
    for (let cat of [...new Set(stimuli_list.map((a) => a.Category))]) {
        // Get all stimuli of this category
        var cat_stimuli = stimuli_list.filter((a) => a.Category == cat)

        // Shuffle cat_stimuli
        cat_stimuli = shuffleArray(cat_stimuli)

        // Assign half to "Reality" condition and half to "Fiction" condition
        for (let i = 0; i < cat_stimuli.length; i++) {
            cat_stimuli[i].Condition =
                i < cat_stimuli.length / 2 ? "Reality" : "Fiction"
        }

        // Add to new_stimuli_list
        new_stimuli_list.push(...cat_stimuli)
    }
    return new_stimuli_list
}

stimuli_list = assignCondition(stimuli_list)

// Trials ==========================================================
var fiction_preloadstims = {
    type: jsPsychPreload,
    images: stimuli_list.map((a) => "stimuli/" + a.stimulus),
}

function fiction_fixationcross(isi = 500) {
    return {
        type: jsPsychHtmlKeyboardResponse,
        on_start: function () {
            document.body.style.cursor = "none"
        },
        stimulus:
            "<div  style='font-size:500%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%'>+</div>",
        choices: "NO_KEYS",
        trial_duration: isi,
        save_trial_parameters: { trial_duration: true },
        data: { screen: "fiction_fixationcross" },
    }
}

var fiction_prime = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: function () {
        var cond = jsPsych.timelineVariable("Condition")
        if (cond == "Reality") {
            return (
                "<div style='font-size:400%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%'><b>" +
                "Picture" +
                "</b></div>"
            )
        } else if (cond == "Fiction") {
            return (
                "<div style='font-size:400%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%'><b>" +
                "AI-generated" +
                "</b></div>"
            )
        }
    },
    choices: "NO_KEYS",
    trial_duration: 1000,
    data: { screen: "fiction_prime" },
}

var fiction_showimage = {
    type: jsPsychImageKeyboardResponse,
    stimulus: function () {
        return "stimuli/" + jsPsych.timelineVariable("stimulus")
    },
    stimulus_height: function () {
        if (jsPsych.timelineVariable("Orientation") == "h") {
            return null
        } else {
            return Math.round(
                jsPsych.data.get().last().values()[0]["screen_height"] * 0.9
            )
        }
    },
    stimulus_width: function () {
        if (jsPsych.timelineVariable("Orientation") == "v") {
            return null
        } else {
            return Math.round(
                jsPsych.data.get().last().values()[0]["screen_height"] * 0.9
            )
        }
    },
    choices: ["s"],
    trial_duration: 2000,
    on_finish: function (data) {
        data.trial_number = fiction_trialnumber
        fiction_trialnumber += 1
        data.screen = "fiction_image"
    },
}

var fiction_ratings = {
    type: jsPsychMultipleSlider,
    on_start: function () {
        document.body.style.cursor = "auto"
    },
    questions: [
        {
            prompt: "How much would you consider this image to be <b>sexy</b>?", // Sexual appeal
            name: "Sexiness",
            ticks: ["Not at all", "Very much"],
            required: false,
            min: 0,
            max: 1,
            step: 0.01,
            slider_start: 0.5,
        },
        {
            prompt: "How much did you find this image <b>arousing</b>?",
            name: "Arousal",
            ticks: ["Not at all", "Very much"],
            required: false,
            min: 0,
            max: 1,
            step: 0.01,
            slider_start: 0.5,
        },
    ],
    randomize_question_order: false,
    require_movement: true,
    slider_width: 600,
    data: {
        screen: "fiction_ratings",
    },
}

var fiction_trials = {
    timeline_variables: stimuli_list,
    randomize_order: true,
    timeline: [
        fiction_fixationcross((isi = 100)),
        fiction_prime,
        fiction_fixationcross((isi = 50)),
        fiction_showimage,
        fiction_ratings,
    ],
}
