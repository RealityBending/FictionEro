---
title: "Stimuli Selection 2"
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
#| code-fold: true
library(tidyverse)
library(easystats)
library(ggrepel)


napsero2 <- readxl::read_excel("norms_napsero.XLSX", sheet = "Ratings") |>
  full_join(readxl::read_excel("norms_napsero.XLSX", sheet = "Image parameters"), by = join_by("ID", "Category")) |>
  select(-contains("_SD")) |>
  rename(Orientation = `V/H`,
         Hetero_Men_Valence = val_M_HeM,
         Hetero_Women_Valence = val_M_HeF,
         Homo_Men_Valence = val_M_HoM,
         Homo_Women_Valence = val_M_HoF,
         Hetero_Men_Arousal = aro_M_HeM,
         Hetero_Women_Arousal = aro_M_HeF,
         Homo_Men_Arousal = aro_M_HoM,
         Homo_Women_Arousal = aro_M_HoF) |>
  mutate(across(c("Luminance", "Contrast", "JPEG_size80", "LABL", "LABA", "LABB", "Entropy"), as.numeric),
         Description = NA)


# # Join
# naps <- filter(naps, ID %in% filter(napsero, Category == "Non-erotic")$ID)
# naps[c("Men_Arousal", "Men_Valence", "Women_Valence", "Women_Arousal", "Nr", "Orientation")] <- NA
# napsero[napsero$Category== "Non-erotic", "Category"] <- NA
# 
# ids <- napsero[is.na(napsero$Category), ]$ID
# for(c in c("Category", "Height", "Width", "Luminance", "Contrast",
#            "JPEG_size80", "LABL", "LABA", "LABB", "Entropy", "Description")) {
#   napsero[napsero$ID == ids, c] <- naps[naps$ID == ids, c]
# }

```


## Selection

### Select based on norms
```{r}
men <- napsero2 |>
  filter(!Category %in% c("Non-erotic", "Male Couple", "Female Couple", "Male")) |>
  group_by(Category) |>
  slice_max(Hetero_Men_Arousal, n=8, with_ties = FALSE) |>
  pull(ID)

homo_men <- napsero2 |>
  filter(!Category %in% c("Non-erotic", "Female Couple", "Female", "Opposite-sex Couple")) |>
  group_by(Category) |>
  slice_max(Homo_Men_Arousal, n=8, with_ties = FALSE) |>
  pull(ID) 

women <- napsero2 |>
  filter(!Category %in% c("Non-erotic", "Female Couple", "Male Couple", "Female"), !ID %in% men) |>
  group_by(Category) |>
  slice_max(Hetero_Women_Arousal, n=8, with_ties = FALSE) |>
  pull(ID) 

homo_women <- napsero2 |>
  filter(!Category %in% c("Non-erotic", "Male Couple", "Male", "Opposite-sex Couple"), !ID %in% men) |>
  group_by(Category) |>
  slice_max(Homo_Women_Arousal, n=8, with_ties = FALSE) |>
  pull(ID) 
# 
# neutral <-  napsero2|>
#   filter(Category == "Non-erotic", !ID %in% c(men, women)) |>
#   mutate(Arousal = (Hetero_Men_Arousal + Hetero_Women_Arousal + Homo_Men_Arousal + Homo_Women_Arousal ) / 4) |>
#   slice_min(Arousal, n=10, with_ties = FALSE) |>
#   pull(ID)
# 
# pos_arousing <-  napsero2 |>
#   filter(Category == "Non-erotic", !ID %in% c(men, women, neutral)) |>
#   mutate(Arousal = (Hetero_Men_Arousal + Hetero_Women_Arousal + Homo_Men_Arousal + Homo_Women_Arousal) / 4,
#          Valence = (Hetero_Men_Valence + Hetero_Women_Valence + Homo_Men_Valence + Homo_Women_Valence) / 4) |>
#   filter(Valence > 5) |>
#   slice_max(Arousal, n=10, with_ties = FALSE) |>
#   pull(ID)

# selected2 <- unique(c(men, homo_men, women, homo_women, neutral, pos_arousing))

#only has unique images 
selected_erotic_2 <- c(men, women, homo_men,homo_women)

cat(
  paste0("N (men) = ", length(men), "\nN (homo_men) = ", length(homo_men),  "\nN (women) = ", length(women), "\nN (homo_women) = ", length(homo_women),
       "\nTotal = ", length(selected_erotic_2))
)

```

```{r}
selected_erotic_2

```

### Visualization

```{r}
#| out.width: 1\\textwidth
#| fig.width: 10
#| fig.height: 8
#| dpi: 300
#| message: false

dat2 <- napsero2 |>
  mutate(Selected = ifelse(ID %in% selected_erotic_2, TRUE, FALSE),
         label = ifelse(Selected, str_remove(ID, ".jpg"), NA)) |>
  pivot_longer(cols = c("Hetero_Men_Valence", "Hetero_Men_Arousal", "Hetero_Women_Valence", "Hetero_Women_Arousal", "Homo_Men_Valence", "Homo_Men_Arousal", "Homo_Women_Valence", "Homo_Women_Arousal")) |>
  separate(name, into=c("Sexual_Orientation", "Target", "Variable")) |>
  pivot_wider(names_from=Variable, values_from=value)

# dat2 |>
#   filter(Category != "Non-erotic") |>
#   ggplot(aes(x=Valence, y=Arousal)) +
#   geom_point(aes(shape=Selected, color=Category), size=6, alpha=0.8) +
#   ggside::geom_ysidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
#   ggside::geom_xsidedensity(data=filter(dat2, Selected), aes(color=Category), key_glyph = draw_key_blank) +
#   # ggrepel::geom_label_repel(aes(label = label)) +
#   scale_shape_manual(values=c("TRUE"=20, "FALSE"=4)) +
#   scale_color_manual(values = c(
#     "Opposite-sex Couple"="#673AB7", "Male Couple"= "#3F51B5", "Female Couple" = "#9C27B0",
#     "Female" = "#E91E63", "Male"= "#2196F3")) +
#   guides(shape = guide_legend(override.aes = list(color="white"))) +
#   facet_grid(~Sexual_Orientation*Target) +
#   theme_abyss() +
#   theme(ggside.panel.grid.major = element_blank(), 
#         ggside.axis.text = element_blank(),
#         ggside.axis.line = element_blank())

dat2 |>
  filter(Category != "Non-erotic") |>
  ggplot(aes(x = Valence, y = Arousal)) +
  geom_point(data = filter(dat2, Selected == FALSE),
             aes(shape = Selected, color = Category), size = 4, alpha = 0.3) +
  geom_point(data = filter(dat2, Sexual_Orientation == "Hetero", Target == "Men",
                           Category %in% c("Opposite-sex Couple", "Female"), 
                           ID %in% men | Selected == FALSE),
             aes(shape = Selected, color = Category), size = 6, alpha = 0.8) +
  geom_point(data = filter(dat2, Sexual_Orientation == "Hetero", Target == "Women",
                           Category %in% c("Opposite-sex Couple", "Male"),
                           ID %in% women | Selected == FALSE),
             aes(shape = Selected, color = Category), size = 6, alpha = 0.8) +
  geom_point(data = filter(dat2, Sexual_Orientation == "Homo", Target == "Men",
                           Category %in% c("Male Couple", "Male"), 
                           ID %in% homo_men | Selected == FALSE),
             aes(shape = Selected, color = Category), size = 6, alpha = 0.8) +
  geom_point(data = filter(dat2, Sexual_Orientation == "Homo", Target == "Women", 
                           Category %in% c("Female Couple", "Female"), 
                           ID %in% homo_women | Selected == FALSE),
             aes(shape = Selected, color = Category), size = 6, alpha = 0.8) +
  ggside::geom_ysidedensity(data = filter(dat2, Sexual_Orientation == "Hetero", Target == "Men",
                           Category %in% c("Opposite-sex Couple", "Female")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_xsidedensity(data = filter(dat2, Sexual_Orientation == "Hetero", Target == "Men",
                           Category %in% c("Opposite-sex Couple", "Female")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_ysidedensity(data = filter(dat2, Selected, Sexual_Orientation == "Hetero", Target == "Women", 
                           Category %in% c("Opposite-sex Couple", "Male")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_xsidedensity(data = filter(dat2, Selected, Sexual_Orientation == "Hetero", Target == "Women", 
                           Category %in% c("Opposite-sex Couple", "Male")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_ysidedensity(data = filter(dat2, Sexual_Orientation == "Homo", Target == "Men",
                           Category %in% c("Male Couple", "Male")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_xsidedensity(data = filter(dat2, Sexual_Orientation == "Homo", Target == "Men",
                           Category %in% c("Male Couple", "Male")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_ysidedensity(data = filter(dat2, Selected, Sexual_Orientation == "Homo", Target == "Women", 
                           Category %in% c("Female Couple", "Female")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  ggside::geom_xsidedensity(data = filter(dat2, Selected, Sexual_Orientation == "Homo", Target == "Women", 
                           Category %in% c("Female Couple", "Female")),
                            aes(color = Category), key_glyph = draw_key_blank, alpha = 0.6) +
  scale_shape_manual(values = c("TRUE" = 20, "FALSE" = 4)) +
  scale_color_manual(values = c(
    "Opposite-sex Couple" = "#673AB7", "Male Couple" = "#3F51B5", "Female Couple" = "#9C27B0",
    "Female" = "#E91E63", "Male" = "#2196F3")) +
  guides(shape = guide_legend(override.aes = list(color = "white"))) +
  facet_grid(~Sexual_Orientation * Target) +
  theme_abyss() +
  theme(ggside.panel.grid.major = element_blank(), 
        ggside.axis.text = element_blank(),
        ggside.axis.line = element_blank())




```


## Final Selection

- ID: picture category and number
- V/H: vertical / horizontal
- Av/Ap: avoidance - approach dimension
- M: mean
- SD: standard deviation
- JPEG_size80: index of overall complexity
- LABL: luminance in CIE L*a*b color space
- LABA: the amount of red color CIE L*a*b color space
- LABB: the amount of the green color CIE L*a*b color space
- Entropy: the amount of complexity in gray scale. Images with high entropy are images that are more "noisy" and have a high degree of contrast.

```{r}
#| code-fold: true

selection_erotic2 <- napsero2 |> 
  filter(ID %in% selected_erotic_2)

write.csv(selection_erotic2, "stimuli_data2.csv", row.names=FALSE)
knitr::kable(selection_erotic2)
```


```{r}
#| code-fold: true
json <- selection2 |> 
  select(stimulus=ID, Category, Orientation) |> 
  jsonlite::toJSON()
  
write(paste("var stimuli_list2 = ", json), "stimuli_list2.js")
```


```{r}
#| code-fold: true
path_ero <- "C:/Dropbox/RECHERCHE/docs/Stimuli/NAPS/NAPS_ERO/"
path_naps <- "C:/Dropbox/RECHERCHE/docs/Stimuli/NAPS/NAPS/"

# Remove all current files
unlink("../stimuli/*")

# Copy each file
for(file in selected) {
  if(str_detect(file, "Male|Female")) {
    file.copy(paste0(path_ero, file), "../stimuli/")
  } else {
    file.copy(paste0(path_naps, file), "../stimuli/")
  }
}
```
