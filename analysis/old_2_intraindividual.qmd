---
title: "FictionEro - Intraindividual Effects"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: true
    toc: true
---

## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(glmmTMB)

options(mc.cores = parallel::detectCores(),
        brms.backend = "cmdstanr",
        width = 300)
```


```{r}
dfsub <- read.csv("../data/data_participants.csv")
df <- read.csv("../data/data.csv") |> 
  right_join(
    dfsub[c("Participant", "Experimenter", "Language", "Mobile", "Feedback_LabelsIncorrect")],
    by = "Participant"
    ) |> 
  # datawizard::rescale(select=c("Arousal", "Enticement", "Realness"), range=c(0, 1), to=c(0.001, 0.999)) |> 
  # datawizard::rescale(select=c("Valence"), range=c(-1, 1), to=c(0.001, 0.999)) |> 
  datawizard::rescale(select=c("Valence"), range=c(-1, 1), to=c(0, 1)) |> 
  mutate(Condition = fct_relevel(Condition, "Photograph", "AI-Generated"),
         Relevance =  fct_relevel(Relevance, "Relevant", "Irrelevant", "Non-erotic"),
         Sex =  fct_relevel(Sex, "Male", "Female"),
         Feedback_LabelsIncorrect =  fct_relevel(Feedback_LabelsIncorrect, "False", "True"))

results_table <- function(model, effects="fixed") {
  display(parameters::parameters(model, effects=effects))
}
```


## Model Selection

This section is about selecting the best model and performing the **manipulation check**: Neutral vs. Emotional

### Arousal


```{r}
df |> 
  mutate(Arousal_Extreme = ifelse(Arousal %in% c(0, 1), "Extreme", "Not extreme")) |>
  ggplot(aes(x=Arousal, fill=Relevance)) +
  geom_histogram(aes(color=Arousal_Extreme), position = "identity", bins=80) +
  facet_grid(Relevance~Sex, scales="free_y") +
  scale_color_manual(values=c("red", "white"), guide="none") +
  scale_fill_manual(values=c("Relevant"="#E91E63", "Irrelevant"="#FF9800", "Non-erotic"="#03A9F4"), guide="none") +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Arousal") +
  theme_abyss() +
  theme(plot.title = element_text(hjust = 0.5, face="bold"))
```

The *Arousal* data is composed of a mixture of extreme responses (0 and 1) and non-extreme responses between 0 and 1, lending itself to a zero-and-one inflated beta (ZOIB) regression model (see [this tutorial](https://www.andrewheiss.com/blog/2021/11/08/beta-regression-guide/)). They jointly model the probability of extreme responses, the probability of 1 vs. 0, and the mean and spread of the rest of the responses.

```{r}
#| eval: false

# Get a sense of Random Factors
m1 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1|Participant) + (1|Item), data=df)
m2 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1+Relevance|Participant) + (1|Item), data=df)
m3 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1|Participant) + (1+Sex|Item), data=df)
m4 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1|Participant) + (1+Relevance|Item), data=df)
m5 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1|Participant) + (1+Sex / Relevance|Item), data=df)
m6 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1+Relevance|Participant) + (1+Sex|Item), data=df)
m7 <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance + (1+Relevance|Participant) + (1+Relevance|Item), data=df)


rbind(
  mutate(performance::icc(m1, by_group=TRUE), Model = "m1"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m1)$R2_conditional, Model = "m1"),
  mutate(performance::icc(m2, by_group=TRUE), Model = "m2"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m2)$R2_conditional, Model = "m2"),
  mutate(performance::icc(m3, by_group=TRUE), Model = "m3"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m3)$R2_conditional, Model = "m3"),
  mutate(performance::icc(m4, by_group=TRUE), Model = "m4"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m4)$R2_conditional, Model = "m4"),
  mutate(performance::icc(m5, by_group=TRUE), Model = "m5"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m5)$R2_conditional, Model = "m5"),
  mutate(performance::icc(m6, by_group=TRUE), Model = "m6"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m6)$R2_conditional, Model = "m6"),
  mutate(performance::icc(m7, by_group=TRUE), Model = "m7"),
  data.frame(Group = "Conditional R2", ICC = performance::r2(m7)$R2_conditional, Model = "m7")
) |>
  ggplot(aes(x = Model, y = ICC, color=Group)) +
  geom_line(aes(group=Group))

test_bf(m6, m1, m2, m3, m4, m5, m7)
compare_performance(m2, m7)

# It seems like the full model, with the effect of relevance on participants and items, is the best.
```

#### Model Comparison


```{r}
#| echo: false

load("models/m_baseline_arousal_linear.RData")
load("models/m_baseline_arousal_beta.RData")
load("models/m_baseline_arousal_zoib.RData")
load("models/m_baseline_arousal_ordbeta.RData")
```


```{r}
pred <- as.data.frame(t(brms::posterior_predict(m_baseline_arousal_linear, ndraws=50))) |>
  datawizard::data_addprefix("m_baseline_arousal_linear") |>
  cbind(
    as.data.frame(t(brms::posterior_predict(m_baseline_arousal_beta, ndraws=50))) |>
      datawizard::data_addprefix("m_baseline_arousal_beta") |>
      select_if(\(x) length(unique(x)) > 2),
    as.data.frame(t(brms::posterior_predict(m_baseline_arousal_zoib, ndraws=50))) |>
      datawizard::data_addprefix("m_baseline_arousal_zoib") |>
      select_if(\(x) length(unique(x)) > 2),
    as.data.frame(t(brms::posterior_predict(m_baseline_arousal_ordbeta, ndraws=50))) |>
      datawizard::data_addprefix("m_baseline_arousal_ordbeta") |>
      select_if(\(x) length(unique(x)) > 2)
  ) |>
  cbind(df)


rbind(
  estimate_density(select(pred, starts_with("m_baseline_arousal_linear"), Sex, Relevance),
                   method="KernSmooth", at=c("Sex", "Relevance")) |>
    mutate(Prediction = "Linear"),
  estimate_density(select(pred, starts_with("m_baseline_arousal_beta"), Sex, Relevance),
                   method="KernSmooth", at=c("Sex", "Relevance")) |>
    mutate(Prediction = "Beta"),
  estimate_density(select(pred, starts_with("m_baseline_arousal_zoib"), Sex, Relevance),
                   method="KernSmooth", at=c("Sex", "Relevance")) |>
    mutate(Prediction = "ZOIB"),
  estimate_density(select(pred, starts_with("m_baseline_arousal_ordbeta"), Sex, Relevance),
                   method="KernSmooth", at=c("Sex", "Relevance")) |>
    mutate(Prediction = "OrdBeta")
) |>
  mutate(Prediction = fct_relevel(Prediction, "Linear", "Beta", "ZOIB", "OrdBeta")) |>
  ggplot(aes(x=x, y=y, color=Relevance)) +
  geom_line(aes(group=interaction(Parameter, Sex, Relevance)),
            linewidth=0.5, alpha=0.3) +
  geom_line(data=estimate_density(df, select="Arousal", method="KernSmooth", at=c("Sex", "Relevance")),
            linewidth=1) +
   scale_color_manual(values=c("Relevant"="#E91E63", "Irrelevant"="#FF9800", "Non-erotic"="#03A9F4")) +
  facet_grid(Prediction~Sex) +
  coord_cartesian(ylim=c(0, 15), xlim=c(0, 1)) +
  theme_minimal()

brms::loo_compare(brms::add_criterion(m_baseline_arousal_linear, "loo"),
                  brms::add_criterion(m_baseline_arousal_beta, "loo"),
                  brms::add_criterion(m_baseline_arousal_zoib, "loo"),
                  brms::add_criterion(m_baseline_arousal_ordbeta, "loo")) |> 
  report()
```

#### Model Description

```{r}
summary(m3, robust=TRUE, priors=TRUE)
# performance::variance_decomposition(m2)
# brms::bayes_R2(m2)
# performance::icc(m1, by_group=TRUE)
```



### Enticement


```{r}
df |> 
  mutate(Enticement_Extreme = ifelse(Enticement %in% c(0, 1), "Extreme", "Not extreme")) |>
  ggplot(aes(x=Enticement, fill=Relevance)) +
  geom_histogram(aes(color=Enticement_Extreme), position = "identity", bins=80) +
  facet_grid(Relevance~Sex, scales="free_y") +
  scale_color_manual(values=c("red", "white")) +
  scale_fill_manual(values=c("Relevant"="#E91E63", "Irrelevant"="#FF9800", "Non-erotic"="#03A9F4")) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Enticement") +
  theme_abyss() +
  theme(plot.title = element_text(hjust = 0.5, face="bold"))
```


## Arousal

### Descriptive

```{r}
plot_descriptive <- function(df, target="Arousal") {
  # By item
  order <- df |>
    mutate(.Item_Order = paste0(Relevance, "_", Sex, "_", Item)) |>
    summarize(mean = mean(.data[[target]], na.rm=TRUE), .by=c("Condition", ".Item_Order")) |> 
    arrange(.Item_Order, desc(Condition)) |> 
    mutate(diff = sign(mean - lag(mean)),
           Relevance = str_extract(.Item_Order, "^[^_]+"),
           .Item_Order = str_extract(.Item_Order, "(?<=_).+")) |>
    filter(Condition == "Photograph") |> 
    arrange(Relevance, diff, mean)
    
  p1 <- df |>
    mutate(.Item_Order = paste0(Sex, "_", Item)) |>
    group_by(.Item_Order, Condition) |>
    ggdist::mean_qi(.data[[target]], .width=0.95) |>
    mutate(Sex = fct_rev(str_extract(.Item_Order, "^[^_]+"))) |>
    left_join(order[c(".Item_Order", "diff")], by=".Item_Order") |>
    mutate(.Item_Order = fct_relevel(.Item_Order, order$.Item_Order)) |>
    # mutate(.average = mean(.data[[target]]), .by="Item") |>
    # mutate(Item = fct_reorder(Item, .average)) |>
    ggplot(aes(y = .Item_Order, x=.data[[target]])) +
    geom_line(aes(color=as.factor(diff)), linewidth=1) +
    geom_point(aes(color=Condition), size=2) +
      
    # ggdist::stat_slabinterval(aes(fill=Condition, color=Condition),
    #                           .width=0.95, normalize="xy", slab_alpha=0.5) +
    # ggdist::stat_histinterval(aes(fill=Condition, color=Condition),
    #                           .width=0.95, normalize="xy", slab_alpha=0.5) +
    scale_color_manual(values=c("AI-Generated"="#2196F3", "Photograph"="#F44336", "1"="#F44336", "-1"="#2196F3"),
                       breaks = c('AI-Generated', 'Photograph')) +
    # scale_fill_manual(values=c("AI-Generated"="#2196F3", "Photograph"="#F44336")) +
    scale_y_discrete(labels = function(x) str_extract(x, "(?<=_).+")) +
    theme_minimal() +
    theme(panel.grid.minor.x = element_blank(),
          # panel.grid.major.x = element_blank(),
          panel.border = element_blank(),
          axis.line.x = element_blank()) +
    labs(title = paste0(target, " by Item"), color="Condition", y="Items") +
    facet_wrap(~Sex, scales="free_y")

  # By participant
  p2 <- df |>
    summarize(.average = mean(.data[[target]]),
              .by=c("Sex", "Participant", "Condition")) |>
    pivot_wider(names_from = Condition, values_from = .average) |>
    mutate(.diff = Photograph - `AI-Generated`) |>
    mutate(Participant = fct_reorder(Participant, .diff)) |>
    ggplot(aes(x = .diff, y=Participant)) +
    geom_bar(aes(fill=.diff), stat = "identity")  +
    scale_fill_gradient2(guide="none", low="red", high="red", mid="blue") +
    labs(title = paste0(target, " by Participant")) +
    facet_wrap(~Sex, ncol=2, scales="free_y") +
    theme_minimal() +
    theme(panel.grid.major.y = element_blank(),
          panel.border = element_blank(),
          axis.line.x = element_blank(),
          axis.text.y = element_blank()) +
    labs(title = paste0(target, " by Participant"), x="Difference (Photograph - AI-Generated)", y="Participants")

  p1 / p2 + plot_layout(heights = c(2, 1))
}

plot_descriptive(df, "Arousal")
```





```{r}
m <- glmmTMB::glmmTMB(Arousal ~ Sex / Relevance / Condition + (Relevance | Participant) + (1|Item),
                 data=df, family=glmmTMB::ordbeta())
summary(m)

m <- glmmTMB::glmmTMB(Arousal ~ Sex / Condition + (Condition | Participant) + (1|Item),
                 data=filter(df, Relevance=="Relevant"), 
                 family=glmmTMB::ordbeta())
summary(m)

m <- glmmTMB::glmmTMB(Arousal ~ Mobile / Sex / Condition + (Condition | Participant) + (1|Item),
                 data=filter(df, Relevance=="Relevant"), 
                 family=glmmTMB::ordbeta())
summary(m)

m <- glmmTMB::glmmTMB(Arousal ~ Language / Sex / Condition + (Condition | Participant) + (1|Item),
                 data=filter(df, Relevance=="Relevant", Language != "Spanish"), 
                 family=glmmTMB::ordbeta())
summary(m)

m <- glmmTMB::glmmTMB(Arousal ~ Feedback_LabelsIncorrect / Sex / Condition + (Condition | Participant) + (1|Item),
                 data=filter(df, Relevance=="Relevant", Language != "Spanish"), 
                 family=glmmTMB::ordbeta())
summary(m)
```






### Simple Linear Model

```{r}
m <- brms::brm(Arousal ~  0 + Intercept + Sex / (Relevance / Condition) +
                 (0 + Intercept + (Relevance / Condition)|Participant) +
                 (0 + Intercept + (Relevance / Condition)|Item), 
               data=df,
               algorithm = "meanfield",
               init = 0,
               seed=123,
               iter=30000)

summary(m, robust=TRUE, priors=TRUE)
```


### Model Specification

```{r}
formula <- brms::bf(Arousal ~  0 + Intercept + Sex / (Relevance / Condition) +
                 (0 + Intercept + (Relevance / Condition)|Participant) +
                 (0 + Intercept + (Relevance / Condition)|Item),
               # Precision (spread) of the 0-1 values
               phi ~ 0 + Intercept + Sex / (Relevance) +
                 (0 + Intercept + (Relevance)|Participant) +
                 (0 + Intercept + (Relevance)|Item),
               # Zero and one inflation (probability of extreme response)
               zoi ~ 0 + Intercept + Sex / Relevance +
                 (0 + Intercept|Participant),
               # Conditional one inflation (when extreme, probability of 1)
               coi ~ 0 + Intercept + Sex / Relevance +
                 (0 + Intercept|Item),
               family=brms::zero_one_inflated_beta)

# brms::get_prior(formula, data = df)
priors <- c(
  # Mu
  # brms::set_prior("normal(0, 3)", class = "b", dpar=""),  # qlogis(0.5) plogis(0)
  brms::set_prior("normal(0, 1)", class = "b", dpar="", coef = "Intercept"),  
  brms::set_prior("normal(-0.4, 1)", class = "b", dpar="", coef = "SexFemale"),  
  brms::set_prior("normal(-1.8, 1)", class = "b", coef = c("SexMale:RelevanceIrrelevant")),
  brms::set_prior("normal(-0.3, 1)", class = "b", coef = c("SexFemale:RelevanceIrrelevant")),
  brms::set_prior("normal(-1.7, 1)", class = "b", coef = c("SexMale:RelevanceNonMerotic")),
  brms::set_prior("normal(-1, 1)", class = "b", coef = c("SexFemale:RelevanceNonMerotic")),

  # Fiction
  brms::set_prior("normal(0, 1)", class = "b", coef = c("SexFemale:RelevanceRelevant:ConditionAIMGenerated",
                                                        "SexFemale:RelevanceIrrelevant:ConditionAIMGenerated",
                                                        "SexFemale:RelevanceNonMerotic:ConditionAIMGenerated",
                                                        "SexMale:RelevanceRelevant:ConditionAIMGenerated",
                                                        "SexMale:RelevanceIrrelevant:ConditionAIMGenerated",
                                                        "SexMale:RelevanceNonMerotic:ConditionAIMGenerated")),
  # Phi
  # brms::set_prior("normal(0, 3)", class = "b", dpar="phi"),
  brms::set_prior("normal(1.3, 0.5)", class = "b", dpar="phi", coef = "Intercept"),
  brms::set_prior("normal(-0.02, 0.5)", class = "b", dpar="phi", coef = "SexFemale"),  
  brms::set_prior("normal(0.4, 0.5)", class = "b", dpar="phi", coef = c("SexMale:RelevanceIrrelevant")),
  brms::set_prior("normal(0, 0.5)", class = "b", dpar="phi", coef = c("SexFemale:RelevanceIrrelevant")),
  brms::set_prior("normal(0.1, 0.5)", class = "b", dpar="phi", coef = c("SexMale:RelevanceNonMerotic")),
  brms::set_prior("normal(0.1, 0.5)", class = "b", dpar="phi", coef = c("SexFemale:RelevanceNonMerotic")),
  
  # ZOI
  # brms::set_prior("normal(0, 2)", class = "b", dpar="zoi"),
  brms::set_prior("normal(-2.3, 2)", class = "b", dpar="zoi", coef = "Intercept"),
  brms::set_prior("normal(1.42, 2)", class = "b", dpar="zoi", coef = "SexFemale"),
  brms::set_prior("normal(2.8, 2)", class = "b", dpar="zoi", coef = c("SexMale:RelevanceIrrelevant")),
  brms::set_prior("normal(0, 2)", class = "b", dpar="zoi", coef = c("SexFemale:RelevanceIrrelevant")),
  brms::set_prior("normal(3.16, 2)", class = "b", dpar="zoi", coef = c("SexMale:RelevanceNonMerotic")),
  brms::set_prior("normal(1.60, 2)", class = "b", dpar="zoi", coef = c("SexFemale:RelevanceNonMerotic")),
  
  # COI
  # brms::set_prior("normal(0, 5)", class = "b", dpar="coi"),
  brms::set_prior("normal(0.6, 5)", class = "b", dpar="coi", coef = "Intercept"),
  brms::set_prior("normal(-2.7, 5)", class = "b", dpar="coi", coef = "SexFemale"),
  brms::set_prior("normal(-7, 5)", class = "b", dpar="coi", coef = c("SexMale:RelevanceIrrelevant")),
  brms::set_prior("normal(-0.4, 5)", class = "b", dpar="coi", coef = c("SexFemale:RelevanceIrrelevant")),
  brms::set_prior("normal(-7.2, 5)", class = "b", dpar="coi", coef = c("SexMale:RelevanceNonMerotic")),
  brms::set_prior("normal(-3.4, 5)", class = "b", dpar="coi", coef = c("SexFemale:RelevanceNonMerotic")),

  # Random
  brms::set_prior("normal(1.5, 0.5)", class = "sd", dpar="zoi", lb=0),
  brms::set_prior("normal(1, 0.5)", class = "sd", dpar="coi", lb=0),
  brms::set_prior("normal(0.4, 0.5)", class = "sd", dpar="", group ="Participant", lb=0),
  brms::set_prior("normal(0.4, 0.5)", class = "sd", dpar="phi", group ="Participant", lb=0),
  brms::set_prior("normal(0.3, 0.5)", class = "sd", dpar="", group ="Item", lb=0),
  brms::set_prior("normal(0.3, 0.5)", class = "sd", dpar="phi", group ="Item", lb=0)
) |>
  brms::validate_prior(formula, data=df)


m <- brms::brm(formula, 
               data=df,
               prior=priors,
               algorithm = "meanfield",
               init = 0,
               seed=123,
               iter=30000)

summary(m, robust=TRUE, priors=TRUE)
```


### Model Performance


```{r}
m_priors <- update(m, sample_prior = "only", prior=priors)

pred <- as.data.frame(t(brms::posterior_predict(m, ndraws=50))) |>
  datawizard::data_addprefix("post_") |>
  cbind(
    as.data.frame(t(brms::posterior_predict(m_priors, ndraws=50))) |>
      datawizard::data_addprefix("prior_") |>
      select_if(\(x) length(unique(x)) > 2)
  ) |>
  cbind(df)


rbind(
  estimate_density(select(pred, starts_with("post_"), Sex, Relevance, Condition),
                   method="KernSmooth", at=c("Sex", "Relevance", "Condition")) |>
    mutate(Prediction = "Posterior"),
  estimate_density(select(pred, starts_with("prior_"), Sex, Relevance, Condition),
                   method="KernSmooth", at=c("Sex", "Relevance", "Condition")) |>
    mutate(Prediction = "Prior")
) |>
  ggplot(aes(x=x, y=y, color=Relevance, linetype=Condition)) +
  geom_line(aes(group=interaction(Parameter, Sex, Relevance, Condition)),
            linewidth=0.5, alpha=0.3) +
  geom_line(data=estimate_density(df, select="Arousal", method="KernSmooth",
                                  at=c("Sex", "Relevance", "Condition")),
            linewidth=1) +
  facet_grid(Prediction~Sex) +
  coord_cartesian(ylim=c(0, 15), xlim=c(0, 1))
```


### Model Description

Effect size interpretation: consider the coefficient as a fraction of the Erotic vs. Neutral coefficient.

```{r}
# results_table(m)
m
```

<!-- ```{r} -->
<!-- performance::icc(m_arousal_baseline, by_group=TRUE) -->
<!-- performance::variance_decomposition(m_arousal_baseline) -->
<!-- ``` -->


### Model Visualization


```{r}
marg <- marginaleffects::predictions(m, by=c("Sex", "Relevance", "Condition"), newdata = "marginalmeans") |>
  as.data.frame()

marg |>
  ggplot(aes(x=Relevance, y=estimate, color=Condition)) +
  geom_line(aes(group=Condition), position = position_dodge(width=0.2)) +
  geom_pointrange(aes(ymin = conf.low, ymax=conf.high), position = position_dodge(width=0.2)) +
  facet_grid(~Sex)
```





### Sensitivity Analyis

```{r}
#| eval: false

m <- glmmTMB::glmmTMB(Arousal ~ Relevance / Condition + (1|Participant) + (1|Item),
                      data=df)

results <- data.frame()
for(n in seq(20, 80, by=1)) {
  cat(n, " ")
  for(i in 1:20) {
    ppts <- sample(unique(dfsub[dfsub$Sex == "Male", ]$Participant), round(n, 0), replace=TRUE)
    results <- update(m, data=filter(df, Participant %in% ppts)) |>
      parameters::parameters(effects = "fixed") |>
      filter(str_detect(Parameter, "RelevanceRelevant:ConditionAI-Generated")) |>
      mutate(n=n, i=i, Sex="Male") |>
      rbind(results)
  }
}

results |>
  ggplot(aes(x=n, y=p)) +
  geom_hline(yintercept=c(0.05, 0.01, 0.001), linetype="dashed", color="red") +
  geom_point2(size=5, alpha=0.2) +
  geom_smooth() +
  scale_y_sqrt(expand=c(0, 0), breaks=c(0, 0.001, 0.01, 0.05, 0.25, 0.5),
               minor_breaks = NULL) +
  coord_cartesian(ylim=c(0, NA)) +
  labs(title="Sensitivity Analysis by Simulation",
       subtitle = "Effect of 'Fiction' on Arousal (for Males)",
       x = "Number of Participants",
       y = "p-value") +
  theme_bw()
```


### Alternative Analysis

```{r}
#| eval: false

formula <- brms::bf(Arousal ~ s(Norms_Arousal, by=interaction(Sex, Condition)) +
                      (1|Participant) + (1|Item),
                    family = brms::Beta)

mgam <- brms::brm(formula,
               data=df,
               # prior=priors,
               # sample_prior = "only",
               algorithm = "meanfield",
               init = 0,
               seed=123,
               iter=10000)

marginaleffects::predictions(mgam, newdata=insight::get_datagrid(mgam), type="response") |>
  as.data.frame() |>
  ggplot(aes(x=Norms_Arousal, color=Condition)) +
  geom_line(aes(y=estimate)) +
  geom_point(data=df, aes(y=Arousal)) +
  facet_grid(~Sex)

marginaleffects::slopes(mgam,
                        newdata=insight::get_datagrid(mgam, at=c("Sex", "Norms_Arousal"), length=20),
                        variables="Condition")  |>
  as.data.frame() |>
  ggplot(aes(x=Norms_Arousal, y=estimate)) +
  geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=Condition), alpha=0.3) +
  geom_line() +
  facet_grid(~Sex)
```



## Enticement

We note that the variability of Enticement scores is larger than that of Arousal.

```{r}
m <- glmmTMB::glmmTMB(Enticement ~ Sex / (Relevance / Condition) + (1+Relevance|Participant) + (1|Item), data=df)
performance::icc(m, by_group=TRUE)
results_table(m)

m <- glmmTMB::glmmTMB(Enticement ~ Sex / (Relevance / Condition) + (1+Relevance|Participant) + (1|Item), data=df, family=beta_family(link = "logit"))
results_table(m)
```

## Valence

```{r}
m <- glmmTMB::glmmTMB(Valence ~ Sex / (Relevance / Condition) + (1|Participant) + (1|Item), data=df)
results_table(m)
m <- mgcv::gamm(Valence ~ Sex / (Relevance / Condition),
                random = list(Participant = ~1, Item = ~1), data=df, family="betar")
results_table(m)
```




## Emotionality (Combined Factor)

```{r}
pca <- principal_components(df[c("Valence", "Arousal", "Enticement")], n = 2)
pca
df$Emotionality <- predict(pca)$PC1
m <- glmmTMB::glmmTMB(Emotionality ~ Sex / (Relevance / Condition) + (1|Participant) + (1|Item), data=df)
results_table(m)
```



## Realness

### Physical Characteristics

```{r}
m <- glmmTMB::glmmTMB(Realness ~ Entropy + Complexity + Contrast + Luminance + (1|Participant) + (1|Item), data=df)
results_table(m)
```


```{r}
m <- glmmTMB::glmmTMB(Realness ~ Sex / (Relevance / Condition) + (1|Participant) + (1|Item), data=df, family=beta_family(link = "logit"))
results_table(m)
```
